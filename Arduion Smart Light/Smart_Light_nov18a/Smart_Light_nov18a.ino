#include "arduino_secrets.h"

/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/8b7b5ccd-bb45-4817-b6a3-719145a02e34

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor temperature;
  CloudRelativeHumidity humidity;
  bool dht11_status;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "DHT.h"

#define DHT_pin 0    // DHT11 pin 

unsigned long current_time = 0;
unsigned long previous_time = 0;
int interval = 5000;

DHT dht(DHT_pin, DHT11);

float temperature_val = 0;
float humidity_val = 0;

void setup()
{
  Serial.begin(9600);   // Initialize serial and wait for port to open:
  delay(1500);        // This delay gives the chance to wait for a Serial Monitor without blocking if none is found

  initProperties();   // Defined in thingProperties.h
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);  // Connect to Arduino IoT Cloud

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  dht.begin();
  dht11_status = false;
}

void loop()
{
  ArduinoCloud.update();

  current_time = millis();

  if (current_time - previous_time >= interval)
  {
    humidity_val = dht.readHumidity();
    temperature_val = dht.readTemperature();

    Serial.print(temperature_val); Serial.print(" *C, ");
    Serial.print(humidity_val); Serial.println(" %");
    
    temperature = temperature_val;
    humidity = humidity_val;
    
    if (current_time - previous_time >= 6*interval)
    {
      if (WiFi.status() != WL_CONNECTED)
      {
        dht11_status = true;
        Serial.println("##### RESET #####");
        ESP.restart();
      }
    }
    
    previous_time = current_time;
  }
}



